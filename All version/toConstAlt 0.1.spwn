extract obj_props
extract $

floorLog2 = (num){
    for result in 1..(1/0){
        if num < 2^result{
            return result - 1
        }
    }
}

impl @counter {
    toConstMove:(
        self, 
        #[desc("Array or range of possible output values")] range: @range
    ) {
        let rangeSize = range.end - range.start
        triggerPathCount = floorLog2(rangeSize)

        if range.start != 0{
//          move the obj to the leftmost posible point
            -> call_with_delay((triggerPathCount) / 20, !{
                -> return range.start
            })
        }

//      Context splitting - for generating multiple trigger
//      it's like a for loop, but start executing everything at the same time.
//      so it's like creating branch timeline which all executing at same time, each for all posible value in i
        branchMultiverse = (rangeBranch){
            for val in rangeBranch {
            ->return val
            }
        }
        i = branchMultiverse((triggerPathCount + 1)..0)
        
//      make sure the operation is executed in the right order (but disrupt the multiverse timeline)
        wait((triggerPathCount - i) / 20)
        j = (2^i)

//      count the counter value
        if(self >= j + range.start){
            self -= j
            
            wait((i+1) / 20)

//          execute the move trigger and restore the counter value
            -> return j
            self += j
        }else{
//          re align the timeline (maybe redundant)
            wait((i+1) / 20)
        }
    }
}